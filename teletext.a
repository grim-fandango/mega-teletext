!to "teletext.o", cbm

SCNKEY 	= $ff9f
GETIN 	= $ff34
SCRNPTR = $0800
COLPTR	= $f800
ROWPTR = $fb

* = $2000

basicstub:		!byte $00,$0a,$20,$0a,$00,$fe,$02,$20
				!byte $30,$00,$16,$20,$14,$00,$9e,$20
				!byte $24,$32,$30,$31,$38,$00,$00,$00

start:      	
				// Lower case mode
				lda #39
				sta 53272

				// Enable VIC-IV mode
				sei
				ldx #$47
				ldy #$53
				stx $d02f
				sty $d02f
				

				// clear H640 - sets screen to 40 column mode
				lda $d031
				and #$7f
				sta $d031

				//set bit 5 
				//ora #$10
				//sta $d031

				// enable 2K colour RAM
				lda $d030
				ora #$01
				sta $d030	

				
				// Move screen RAM
				lda #<SCRNPTR
				sta $d060				
				lda #>SCRNPTR
				sta $d061
				lda #$00
				sta $d062
				sta $d063
				cli

			
				// Enable super extended attribute mode
				lda $d054
				ora #$05
				sta $d054
				
				// Set the bytes required per row to 80
				lda #$50
				sta $d058
				lda #$00
				sta $d059

				// Set the characters to display to 40
				lda #$28
				sta $d05e

				// Set the screen colours to default
				lda #$00
				sta $d020
				sta $d021
				sta $d702
				lda #>dmacoldefault
				sta $d701
				lda #<dmacoldefault
				sta $d700
				jsr triggerdma			

				// Clear screen
				//lda #$00
				//sta $d020
				//sta $d021
				//sta $d702
				//lda #>dmacls
				//sta $d701
				//lda #<dmacls
				//sta $d700
				//jsr triggerdma				

				// Clear screen
loopstart:		ldx #$00
loop:			lda #$20
				sta SCRNPTR,x
				sta SCRNPTR+$100,x
				sta SCRNPTR+$200,x
				sta SCRNPTR+$300,x
				sta SCRNPTR+$400,x
				sta SCRNPTR+$500,x
				sta SCRNPTR+$600,x
				sta SCRNPTR+$700,x
				
				dex
				lda #$00
				sta SCRNPTR,x
				sta SCRNPTR+$100,x
				sta SCRNPTR+$200,x
				sta SCRNPTR+$300,x
				sta SCRNPTR+$400,x
				sta SCRNPTR+$500,x
				sta SCRNPTR+$600,x
				sta SCRNPTR+$700,x
				dex
				bne loop	

				//intialise zeropage storage
				lda #<pagedata
				sta ROWPTR
				lda #>pagedata
				sta ROWPTR + 1
	
readrow:		//read magazine number from MRAG
				// this is a fudge for now and only works with magazine 1
				ldy #$02 // for some reason there is a two-byte header when a binary file is included
				lda (ROWPTR),y
				and #$40
				rol
				rol
				sta .magazine

				// read row number from MRAG
				lda #$00
				sta .row
rowbit0:		lda (ROWPTR),y
				sta $802
				and #$40
				beq rowbit1
				inc $d020
				lda #$01
				sta .row
rowbit1:		iny
				lda (ROWPTR),y
				and #$02
				beq rowbit2
				lda .row
				adc #$02
				sta .row
rowbit2:		lda (ROWPTR),y
				and #$08
				beq rowbit3
				lda .row
				adc #$04
				sta .row
rowbit3:		lda (ROWPTR),y
				and #$20
				beq rowbit4
				lda .row 
				adc #$08
				sta .row
rowbit4:		lda (ROWPTR),y
				and #$40
				beq gotrow
				lda .row
				adc #$10
				sta .row

gotrow:			inc $d020
				//sta $0800
				//lda .row
				//sta $0804
				//jmp end


validrow:		// ensure row -1 > row < 25, if not set row to row 1
				//lda .row
				//sbc #$18
				//bmi validrow
				//lda #$01
				//sta .row


				// find first location on screen RAM to poke to
				ldx #<SCRNPTR
				ldy #>SCRNPTR
				stx .linestartscrn
				sty .linestartscrn + 1

				//lda .row
				//sta $0804

rowloop:		cmp #$00
				beq printline			
				clc
				lda .linestartscrn
				adc #80
				sta .linestartscrn
				bcs nextpage
				jmp rowloop
nextpage:		inc .linestartscrn + 1
				jmp rowloop				

				// -------------------------------------------------------

				// Poke string to screen RAM
printline:		
				lda .linestartscrn
				sta screenpoke + 1
				lda .linestartscrn + 1
				sta screenpoke + 2

				lda #$00
				ldx #$02
				ldy #$04

				// if header row, start printing at column 8
				lda .row
				cmp #$00
				bne printloop
				ldy #$0a // column 8 + 2 because of the weird two byte header when including a binary file
				ldx #$10 // start printing on screen at $10/2 = position 8 (divide by 2 because of SEAM)
					
printloop:		// convert ASCII to C65 screen codes
				lda #$00
				sta .attribflag
				
				lda (ROWPTR),y
				and #$7f	
				cmp #$1f
				bcs notattrib
				ldz #$ff
				stz .attribflag

notattrib:		phy
				tay
				lda ttx2scrtable,y
							
				ply
				cpy #42
				beq end

				// attribute codes
				ldz .attribflag
				cpz #$ff
				bne screenpoke						
				//jsr alphacolour // accumulator contains colour
				lda #$20	//attribute space

screenpoke:	 	sta .linestartscrn,x
				inx
				inx
				iny
				jmp printloop

end:			

key:			lda $d4
				cmp #60
				bne key
		

				// turn off super extended attribute mode
				lda $d054
				and #250
				sta $d054
				rts	

				//jmp seamtest
				//lda #$0a
				//sta $0800			
				
				//DMA list test
				lda #$03
				sta .pokeword

				lda #$04
				sta .destlo
				lda #$f8
				sta .desthi
				lda #$01
				sta .destbank

				lda #$00
				sta $d702
				lda #>dmapoke
				sta $d701

				lda #<dmapoke
				sta $d700
				jsr triggerdma

// ------------------------------------------
				//SEAM screen byte test
				// byte 0: 	$80 = inverse video
				// 			$40 = all graphics symbols, can't tell what it's done
				//			$20 = numbers intact, letters are other symbols, can't tell what it's done
				//			$10 = same sort of thing as $20
				//			$08 = same sort of thing again
				//			$04 = same again
				//			$02 = same again
				//			$01 = same again
				// byte 1:  $80 = for kerning
				//			$40 = kerning
				//			$20 = kerning
				//			$10 = all black?
				//			$08 = alternate characters?
				// 			$04 = background colour = foreground colour?
				//			$02 = alternate character set?
				// 			$01 = all black?

seamtest:		ldx #$ff
seamloop:		lda .linestartscrn,x			
				ora #$00
				sta .linestartscrn,x
				dex
				dex
				bne seamloop

// ------------------------------------------


				rts

triggerdma:		lda #$00
				sta $d703
				rts

//---------------------------------------------				

alphacolour:
				// save colour to dmalist				
				sta .pokeword

				// save everything to the stack
				pha
				txa
				pha
				tya
				pha

				// length of colour to apply to take us to the end of the line
				sty .tempbyte
				lda #80
				sbc .tempbyte
				tax
				inx

				// work out the colour RAM location to start from	
				jsr findcolramposn

				// we are poking 1 byte at a time because we have to poke every other byte
				lda #$01
				sta .pokecount

				// loop from the start location, writing to every other byte

colourloop:		lda .linestartcolr
				sta .destlo
				lda .linestartcolr + 1
				sta .desthi

				lda #$01
				sta .destbank

				lda #$00
				sta $d702
				lda #>dmapoke
				sta $d701
				lda #<dmapoke
				sta $d700
				jsr triggerdma

				dex
				beq xcolourloop
				lda .linestartcolr
				adc #$02
				sta .linestartcolr
				bcc colourloop
				inc .linestartcolr + 1
				jmp colourloop

xcolourloop:	pla 
				tay
				pla
				tax
				pla

				rts

findcolramposn:
				pha
				txa
				pha 
				tya
				pha

				// find first location on screen RAM to poke to
				ldx #<COLPTR
				ldy #>COLPTR
				stx .linestartcolr
				sty .linestartcolr + 1

				ldy .row
				iny

				// add in the start column
				lda .linestartcolr
				adc .tempbyte
				sta .linestartcolr

colrowloop:		dey
				beq colexit				
				clc
				lda .linestartcolr
				adc #80
				sta .linestartcolr
				bcs colnextpage
				jmp colrowloop
colnextpage:	inc .linestartcolr + 1
				jmp colrowloop	

colexit:		pla 
				tay
				pla
				tax
				pla
				rts

ttx2scr:		// Converts teletext codes to C64 screen codes



// --------------------------------------------------------------------------------------
// DATA
// --------------------------------------------------------------------------------------

.curntlinebase:	!word $f800
cursorpos:		!byte 0

dmacoldefault:	!byte $03		; fill
				!word 2000		; count
				!word $01		; value to write
				!byte $00		; bank (ignored for fill)
				!word $f800		; destination
				!byte $01		; bank 1
				!byte $00		; command hi byte
				!word $0000		; modulo (ignored for fill)

dmacls:			!byte $03		; fill
				!word 2000		; count
				!word $20		; value to write
				!byte $00		; bank (ignored for fill)
				!word SCRNPTR	; destination
				!byte $00		; bank 1
				!byte $00		; command hi byte
				!word $0000		; modulo (ignored for fill)

dmacopy:		!byte $00		; copy
				!word 2000		; count
				!word COLPTR	; source base address
				!byte $00		; source bank 
				!word $f800		; destination
				!byte $01		; bank 1
				!byte $00		; command hi byte
				!word $0000		; modulo (ignored for fill)

dmapoke:		!byte $03		; fill
.pokecount		!word 2			; count
.pokeword:		!word $0004		; value to write
				!byte $00		; source bank 
.destlo:		!byte $02		; destination
.desthi:		!byte $f8
.destbank:		!byte $01 		; bank 1
				!byte $00		; command hi byte
				!word $0000		; modulo (ignored for fill)
				
//.msg:			!raw "  P100  CEEFAX 100  Thu 18 Jan ", 3, "12:01/00", $ff
//				!raw 1, "Red", 2, "Green", 3, "Yellow", 4, "Blue", $ff
//
//.msg2:			!byte $43, $45, $45, $46, $41, $58, $20, $20
//				!raw "P"
//				!byte $ff

.linestartscrn:	!word 0
.linestartcolr: !word 0
.tempbyte		!byte 0
.currentchar	!byte 0
.attribflag		!byte 0

// -------------------------------------
// TTX to SCR look-up table
// -------------------------------------

ttx2scrtable:	!byte $00
				!byte $02	// red
				!byte $05	// green
				!byte $07	// yellow
				!byte $06	// blue
				!byte $04	// magenta
				!byte $03	// cyan
				!byte $01	// white
				!byte $08
				!byte $09
				!byte $0a
				!byte $0b
				!byte $0c
				!byte $0d
				!byte $0e
				!byte $0f
				!byte $10
				!byte $11
				!byte $12
				!byte $13
				!byte $14
				!byte $15
				!byte $16
				!byte $17
				!byte $18
				!byte $19
				!byte $1a
				!byte $1b
				!byte $1c
				!byte $1d
				!byte $1e
				!byte $1f
				!byte $20
				!byte $21
				!byte $22
				!byte $23
				!byte $24
				!byte $25
				!byte $26
				!byte $27
				!byte $28
				!byte $29
				!byte $2a
				!byte $2b
				!byte $2c
				!byte $2d
				!byte $2e
				!byte $2f
				!byte $30
				!byte $31
				!byte $32
				!byte $33
				!byte $34
				!byte $35
				!byte $36
				!byte $37
				!byte $38
				!byte $39
				!byte $3a
				!byte $3b
				!byte $3c
				!byte $3d
				!byte $3e
				!byte $3f
				!byte $40 	// @
				!byte $41	// A
				!byte $42
 				!byte $43
				!byte $44
				!byte $45
				!byte $46 	// F
				!byte $47
				!byte $48 	// H
				!byte $49	// C
				!byte $4a	// D
				!byte $4b	// E
				!byte $4c
				!byte $4d
				!byte $4e
				!byte $4f
				!byte $50	// P
				!byte $51
				!byte $52
				!byte $53
				!byte $54
				!byte $55
				!byte $56
				!byte $57
				!byte $58	// X
				!byte $59
				!byte $5a
				!byte $5b
				!byte $5c
				!byte $5d
				!byte $5e
				!byte $5f
				!byte $60
				!byte $01	// a
				!byte $62
				!byte $63
				!byte $64
				!byte $65
				!byte $66
				!byte $67
				!byte $08	// h
				!byte $69
				!byte $6a
				!byte $6b
				!byte $6c
				!byte $0d	// m
				!byte $0e	// n
				!byte $6f
				!byte $70
				!byte $71
				!byte $72
				!byte $73
				!byte $74
				!byte $15	// u
				!byte $76
				!byte $77
				!byte $78
				!byte $79
				!byte $7a
				!byte $7b
				!byte $7c
				!byte $7d
				!byte $7e
				!byte $7f
				!byte $80
				!byte $81
				!byte $82
				!byte $83
				!byte $84
				!byte $85
				!byte $86
				!byte $87
				!byte $88
				!byte $89
				!byte $8a
				!byte $8b
				!byte $8c
				!byte $8d
				!byte $8e
				!byte $8f
				!byte $90
				!byte $91
				!byte $92
				!byte $93
				!byte $94
				!byte $95
				!byte $96
				!byte $97
				!byte $98
				!byte $99
				!byte $9a
				!byte $9b
				!byte $9c
				!byte $9d
				!byte $9e
				!byte $9f
				!byte $a0
				!byte $a1
				!byte $a2
				!byte $a3
				!byte $a4
				!byte $a5
				!byte $a6
				!byte $a7
				!byte $a8
				!byte $a9
				!byte $aa
				!byte $ab
				!byte $ac
				!byte $ad
				!byte $ae
				!byte $af
				!byte $b0
				!byte $b1
				!byte $b2
				!byte $b3
				!byte $b4
				!byte $b5
				!byte $b6
				!byte $b7
				!byte $b8
				!byte $b9
				!byte $ba
				!byte $bb
				!byte $bc
				!byte $bd
				!byte $be
				!byte $bf
				!byte $c0
				!byte $c1
				!byte $c2
				!byte $c3
				!byte $c4
				!byte $c5
				!byte $c6
				!byte $c7
				!byte $c8
				!byte $c9
				!byte $ca
				!byte $cb
				!byte $cc
				!byte $cd
				!byte $ce
				!byte $cf
				!byte $d0
				!byte $d1
				!byte $d2
				!byte $d3
				!byte $d4
				!byte $d5
				!byte $d6
				!byte $d7
				!byte $d8
				!byte $d9
				!byte $da
				!byte $db
				!byte $dc
				!byte $dd
				!byte $de
				!byte $df
				!byte $e0
				!byte $e1
				!byte $e2
				!byte $e3
				!byte $e4
				!byte $e5
				!byte $e6
				!byte $e7
				!byte $e8
				!byte $e9
				!byte $ea
				!byte $eb
				!byte $ec
				!byte $ed
				!byte $ee
				!byte $ef
				!byte $f0
				!byte $f1
				!byte $f2
				!byte $f3
				!byte $f4
				!byte $f5
				!byte $f6
				!byte $f7
				!byte $f8
				!byte $f9
				!byte $fa
				!byte $fb
				!byte $fc
				!byte $fd
				!byte $fe
				!byte $ff
rowaddress		!word pagedata
.magazine		!byte $01
.page			!byte $00
.row			!byte $00
//pagedata:		!binary "C:\\Users\\jasonrob\\OneDrive\\Documents\\Teletext\\bbc1_1975-08-30_vhs-dub_stradling\\binaries\\100.bin"
//pagedata:		!binary "C:\\Users\\jasonrob\\OneDrive\\Documents\\Teletext\\bbc2_1979-04-12_beta_100percent\\binaries\\201.bin"
pagedata:		!binary "C:\\Users\\jkrob\\OneDrive\\Documents\\Teletext\\bbc2_1979-04-12_beta_100percent\\binaries\\201.bin"